package com.example.Prueba.model;

import java.util.Objects;

import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.NotNull;

public class Calculator {
	
	@NotNull(message="Numero 1 es nulo")
	@Min(value=0, message="Numero 1 es menor que 0")
	private int num1;
	@NotNull
	private int num2;
	@NotNull
	@NotEmpty
	private String operator;
	
	public Calculator() {
		super();
	}
	
	public Calculator(int num1, int num2, String operator) {
		this.num1 = num1;
		this.num2 = num2;
		this.operator = operator;
	}
	
	//Funciones
	
	public int getResult() {
		int res = 0;
		switch(this.operator) {
		case "+":
			res = this.num1 + this.num2;
			break;
		case "-":
			res = this.num1 - this.num2;
			break;
		case "x":
			res = this.num1 * this.num2;
			break;
		case "/":
			res = this.num1 / this.num2;
			break;
		}
		
		return res;
	}
	
	
	//Autogenerated

	public int getNum1() {
		return num1;
	}

	public void setNum1(int num1) {
		this.num1 = num1;
	}

	public int getNum2() {
		return num2;
	}

	public void setNum2(int num2) {
		this.num2 = num2;
	}

	public String getOperator() {
		return operator;
	}

	public void setOperator(String operator) {
		this.operator = operator;
	}

	@Override
	public int hashCode() {
		return Objects.hash(num1, num2, operator);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Calculator other = (Calculator) obj;
		return num1 == other.num1 && num2 == other.num2 && Objects.equals(operator, other.operator);
	}
	
	

}
